{
  "type" : "COMPLEX",
  "heading" : "Dado una lista 'a' de números enteros con tamaño n, ordenarla de menor a mayor de forma recursiva\nEjemplo: f([7, 3, 8, 2, 4, 6, 1, 5]) -> [1, 2, 3, 4, 5, 6, 7, 8]",
  "params" : {
    "a" : ""
  },
  "currentProblemSize" : 0,
  "currentReduction" : 0,
  "currentReductionSolutions" : 0,
  "reducedOperation" : "",
  "problemSizeChoices" : [ "n == len(a)" ],
  "currentBaseCaseIndex" : 0,
  "baseCaseChoices" : [ [ "n <= 1" ] ],
  "baseCaseParameters" : [ [ "0" ] ],
  "returnValues" : [["a"]],
  "reductionChoices" : [ [ "mid = n//2\nv1 = a[:mid]\nv2 = a[mid:]","pivot = a[n//2]\nv1=smaller_than(a,pivot)\nv2=greater_than(a,pivot)" ] ],
  "solutionsChoices" : [ ["Concatenar v1 y v2","Mezclar v1 y v2"],["Concatenar pivot a la cabeza de v1 + v2","Concatenar pivot a la cola de v1 + v2","Concatenar pivot entre v1 y v2"]],
  "recursiveCases" :[
    [
      "mid = n // 2\na1 = merge_sort(a[:mid])\na2 = merge_sort(a[mid:])\nreturn a1 + a2",
      "mid = n // 2\na1 = merge_sort(a[:mid])\na2 = merge_sort(a[mid:])\nreturn merge(a1,a2)"
    ],
    [
      "pivot = a[n // 2]\nv1 = get_smaller_than_or_equal_to(a, pivot)\nv1.remove (pivot)\nv2 = get_greater_than(a, pivot )\nreturn [pivot] + (quick_sort(v1) + quick_sort(v2))",
      "pivot = a[n // 2]\nv1 = get_smaller_than_or_equal_to(a, pivot)\nv1.remove (pivot)\nv2 = get_greater_than(a, pivot )\nreturn (quick_sort(v1) + quick_sort(v2)) + [pivot]",
      "pivot = a[n // 2]\nv1 = get_smaller_than_or_equal_to(a, pivot)\nv1.remove (pivot)\nv2 = get_greater_than(a, pivot )\nreturn (quick_sort(v1) + [pivot]\n+ quick_sort(v2))"
    ]
  ],
  "correctSizeChoices": [0],
  "correctBaseCases": [[0]],
  "correctSolutions" : [ 1,2 ],
  "incorrectProblemSizeText" : [],
  "incorrectBaseCaseText": [[]],
  "inputFormatting" : "Una lista de números enteros desordenada, sin corchetes y separados por comas. Espacio entre números opcional (Ej: 6,5,4,3,2)"
}