{
  "recursiveCases": [
    [
      "\n\t\tmid = n // 2\n\t\ta1 = merge_sort(a[:mid])\n\t\ta2 = merge_sort(a[mid:])\n\t\treturn a1 + a2",
      "\n\t\tmid = n // 2\n\t\ta1 = merge_sort(a[:mid])\n\t\ta2 = merge_sort(a[mid:])\n\t\treturn merge(a1,a2)"
    ],
    [
      "\n\t\treturn inserta_en_lista_ordenada(insert_sort(a[:-1]),a[-1])",
      "\n\t\ttail = a[-1]\n\t\treturn [tail] + a"
    ],
    [
      "\n\t\tm = min(a)\n\t\ta.remove(m)\n\t\treturn select_sort_rec(a) + [m]",
      "\n\t\tm = min(a)\n\t\ta.remove(m)\n\t\treturn [m] + select_sort_rec(a)"
    ],
    [
      "\n\t\tpivot = a[n // 2]\n\t\tv1 = get_smaller_than_or_equal_to(a, pivot)\n\t\tv1.remove (pivot)\n\t\tv2 = get_greater_than(a, pivot )\n\t\treturn [pivot] + (quicksort_variant(v1) + quicksort_variant(v2))",
      "\n\t\tpivot = a[n // 2]\n\t\tv1 = get_smaller_than_or_equal_to(a, pivot)\n\t\tv1.remove (pivot)\n\t\tv2 = get_greater_than(a, pivot )\n\t\treturn (quicksort_variant(v1) + quicksort_variant(v2)) + [pivot]",
      "\n\t\tpivot = a[n // 2]\n\t\tv1 = get_smaller_than_or_equal_to(a, pivot)\n\t\tv1.remove (pivot)\n\t\tv2 = get_greater_than(a, pivot )\n\t\treturn (quicksort_variant(v1) + [pivot]\n+ quicksort_variant(v2))"
    ]
  ],
  "auxFunctions": [
    "def merge(a,b):\n\tif a == []:\n\t\treturn b\n\telif b == []:\n\t\treturn a\n\telse:\n\t\tif a[0] < b[0]:\n\t\t\treturn [a[0]] + mezcla(a[1:], b)\n\t\telse:\n\t\t\treturn [b[0]] + mezcla(a, b[1:])",
    "def inserta_en_lista_ordenada(list,n)\n\tindex = len(list)\n\tfor i in range(len(list)):\n\t\tif list[i] > n:\n\t\t\tindex = i\n\t\t\tbreak\n\tif index == len(list):\n\t\tlist = list[:index] + [n]\n\telse:\n\t\tlist = list[:index] + [n] + list[index:]\n\treturn a",
    "",
    "def get_smaller_than_or_equal_to(a,pivot):\n\treturn [i for i in a if i<=pivot]\ndef get_greater_than(a,pivot):\n\t return [i for i in a if i>pivot]"
  ]
}