
Cosas que hacer:
-Generador de pseudocódigo o código python.
 Ahora mismo es un mapper el que convierte el diagrama a codigo por strings y luego lo pone en un map bindeado a labels.
 Por hacer de esto:
 -Que tome varios casos base/recursivos (centrarse en los base primero)
 -Mapear el caso recursivo (solo cuando esté lo de mapear varios casos recursivos)

-Ver si puedo usar patrones de diseño OOP para mejorar el código

-Hacerlo más bonito

-Refactorizar diagramas
    -PUEDE QUE LA CLAVE PARA LA REFACTORIZACIÓN ESTÉ EN EL WEBVIEWER, CARGANDO LOS DIAGRAMAS COMO HTML
    -Los datos para construir cada diagrama podrían sacarse de archivos JSON en resources en vez de ponerlos a mano en su implementación, ya sea en
    resources o en una BBDD probablemente MongoDB
    -Hay muchas variables que mantienen el estsado del diagrama (currentProblemSize, currentReduction, algorithmIndex...), hay que buscar una manera
    de simplificar eso
    -Hay que ver si hay alguna opción mejor para lo de las soluciones, porque queda muy sucio ahora mismo

Problemas:

Para la refactorización de los diagramas, muchas de las propiedades pueden transformarse en objetos para tenerlo mucho mejor organizado. Aunque si
pasamos a JSON, hay que tener cuidado con eso. Mirar "java serialization with aggregation" para ver como hacerlo

Para el tema de la clase de algoritmos, podría mirarse de hacer en vez de una clase estática sola, crear una librería propia que poder importar.
Mirar cómo se puede hacer.

Recordar que para un problema es: Selecciona tamaño problema -> Selecciona caso base -> Introduce datos -> Selecciona reducción -> Selecciona solución.
Otra cosa importante es que el algoritmo seleccionado es la suma del id del tamaño problema + id de la reducción. Cuidao con eso
Ver que hacer con el tema del caso base, al seleccionarlo qué debería ocurrir.