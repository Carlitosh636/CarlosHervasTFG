
Cosas que hacer:
-Lo de las soluciones: Queda hacer la del Mergesort.
Además hay que ver cómo hacer la parte visual de esto, ya que ahora mismo solo lo muestra por consola el si acierta o no.

-Ver si puedo usar patrones de diseño OOP para mejorar el código

-Hacerlo más bonito

-Generador de pseudocódigo o código python. El petate del diagrama iría en la izquierda y en la derecha, un campo de texto donde se va poniendo el
pseudocódigo. Depende de que se seleccione en los pasos anteriores pone un código u otro

-Los datos para construir cada diagrama podrían sacarse de archivos JSON en resources en vez de ponerlos a mano en su implementación, ya sea en
resources o en una BBDD probablemente MongoDB

-Refactorizar diagramas

-Hay muchas variables que mantienen el estsado del diagrama (currentProblemSize, currentReduction, algorithmIndex...), hay que buscar una manera
de simplificar eso

Problemas:

Para la refactorización de los diagramas, muchas de las propiedades pueden transformarse en objetos para tenerlo mucho mejor organizado. Aunque si
pasamos a JSON, hay que tener cuidado con eso. Mirar "java serialization with aggregation" para ver como hacerlo

Para el tema de la clase de algoritmos, podría mirarse de hacer en vez de una clase estática sola, crear una librería propia que poder importar.
Mirar cómo se puede hacer.

Recordar que para un problema es: Selecciona tamaño problema -> Selecciona caso base -> Introduce datos -> Selecciona reducción -> Selecciona solución.
Otra cosa importante es que el algoritmo seleccionado es la suma del id del tamaño problema + id de la reducción. Cuidao con eso
Ver que hacer con el tema del caso base, al seleccionarlo qué debería ocurrir.